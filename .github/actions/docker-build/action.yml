name: Build Docker image

inputs:
  version:
    required: true
    type: string
  latest:
    required: false
    type: boolean
    default: false
  github-token:
    required: true
    type: string
  docker-image-name:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Log in to registry
      run: echo "${{ inputs.github-token }}" | docker login ghcr.io -u $ --password-stdin
      shell: bash
    - uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        ignore: DL3045,DL3007
    - name: Build and push image
      run: |
        IMAGE_ID=$(echo "ghcr.io/${{ github.repository_owner }}/${{ inputs.docker-image-name }}" | tr '[A-Z]' '[a-z]')
        echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_OUTPUT"
        docker build --tag $IMAGE_ID:${{ inputs.version }} --platform=linux/amd64 --no-cache .
        docker push $IMAGE_ID:${{ inputs.version }}
      shell: bash
    - name: Tag latest
      if: inputs.latest
      run: |
        docker tag $IMAGE_ID:${{ inputs.version }} $IMAGE_ID:latest --platform=linux/amd64 .
        docker push $IMAGE_ID:latest
      shell: bash
    # - name: Delete untagged images
    #   uses: actions/github-script@v6.3.3
    #   with:
    #     github-token: ${{ inputs.github-token }}
    #     script: |
    #       const response = await github.request("GET /orgs/${{ github.repository_owner }}/packages/container/${{ IMAGE_ID }}/versions",
    #         { per_page: 100
    #       });
    #       for(version of response.data) {
    #           if (version.metadata.container.tags.length == 0 && version.name !== "latest" && version.name !== "preview") {
    #               console.log("Delete " + version.id)

    #               const deleteResponse = await github.request("DELETE /orgs/${{ github.repository_owner }}/packages/container/${{ IMAGE_ID }}/versions/" + version.id, { });
    #               console.log("status " + deleteResponse.status)
    #           }
    #       }
