# Generated by Django 4.2.6 on 2023-11-03 14:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import uuid
import wagtail.blocks
import wagtail.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
    ]

    operations = [
        migrations.CreateModel(
            name="FeedbackPrompt",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                (
                    "public_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="public ID",
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        default="What did you think of this page?",
                        max_length=200,
                        verbose_name="prompt text",
                    ),
                ),
                (
                    "response_options",
                    wagtail.fields.StreamField(
                        [
                            (
                                "option",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "icon",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "images/thumb-up.png",
                                                        "Thumbs up",
                                                    ),
                                                    (
                                                        "images/thumb-down.png",
                                                        "Thumbs down",
                                                    ),
                                                ],
                                                label="Icon",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "label",
                                            wagtail.blocks.CharBlock(
                                                label="Label", max_length=100
                                            ),
                                        ),
                                        (
                                            "sentiment",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (-2, "Very negative"),
                                                    (-1, "Negative"),
                                                    (0, "Neutral"),
                                                    (1, "Positive"),
                                                    (2, "Very positive"),
                                                ],
                                                label="Sentiment",
                                            ),
                                        ),
                                        (
                                            "comment_prompt_text",
                                            wagtail.blocks.CharBlock(
                                                blank=True,
                                                default="Can you tell us more about why you answered this way?",
                                                help_text="The text that is displayed to users after responding with this feedback option, prompting them to leave an optional comment to support their feedback. Leave this field blank to avoid prompting users for a comment when this response option is used.",
                                                label="Comment prompt text",
                                                max_length=200,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        use_json_field=True,
                        verbose_name="response options",
                    ),
                ),
                (
                    "thank_you_heading",
                    models.CharField(
                        default="Thank you for your valuable feedback",
                        help_text="Displayed to users after succesfully submitting feedback.",
                        max_length=100,
                        verbose_name="thank you heading",
                    ),
                ),
                (
                    "thank_you_message",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="If supplied, displayed below the 'Thank you heading' when a user succesfully submits feedback.",
                        max_length=200,
                        verbose_name="thank you message",
                    ),
                ),
                (
                    "continue_link_text",
                    models.CharField(
                        default="Return to the previous page",
                        help_text='After submitting feedback, non-JS users are taken to a success page, where the thank you headding and text are displayed, followed by a link to return to the previous page. This field can be used to change the text of that link. For example, "Continue with your search" might make more sense to users.',
                        max_length=200,
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        db_index=True,
                        help_text='The URL path this prompt should be displayed on. For example: "/search/catalogue/".',
                        max_length=255,
                        verbose_name="use for path",
                    ),
                ),
                (
                    "startswith_path",
                    models.BooleanField(
                        default=False,
                        verbose_name="also match paths that start with the above",
                    ),
                ),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
            ],
            options={
                "ordering": ("path", "startswith_path"),
            },
        ),
        migrations.CreateModel(
            name="FeedbackSubmission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "received_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="received at"),
                ),
                (
                    "public_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="public ID",
                    ),
                ),
                ("full_url", models.TextField(editable=False, verbose_name="full URL")),
                (
                    "page_type",
                    models.TextField(
                        editable=False, null=True, verbose_name="page type"
                    ),
                ),
                (
                    "page_title",
                    models.TextField(
                        editable=False, null=True, verbose_name="page title"
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        max_length=255,
                        verbose_name="path",
                    ),
                ),
                (
                    "query_params",
                    models.JSONField(
                        default=dict, editable=False, verbose_name="query params"
                    ),
                ),
                (
                    "prompt_text",
                    models.CharField(
                        editable=False, max_length=200, verbose_name="prompt text"
                    ),
                ),
                (
                    "response_sentiment",
                    models.SmallIntegerField(
                        db_index=True, editable=False, verbose_name="response sentiment"
                    ),
                ),
                (
                    "response_label",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        max_length=100,
                        verbose_name="response label",
                    ),
                ),
                (
                    "comment_prompt_text",
                    models.CharField(
                        editable=False,
                        max_length=200,
                        verbose_name="comment prompt text",
                    ),
                ),
                ("comment", models.TextField(editable=False, verbose_name="comment")),
                (
                    "page_revision_published",
                    models.DateTimeField(
                        editable=False,
                        null=True,
                        verbose_name="page revision published at",
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailcore.page",
                        verbose_name="wagtail page",
                    ),
                ),
                (
                    "page_revision",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="page revision",
                    ),
                ),
                (
                    "prompt",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="submissions",
                        to="feedback.feedbackprompt",
                        verbose_name="prompt",
                    ),
                ),
                (
                    "prompt_revision",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="prompt revision",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="wagtailcore.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "ordering": ("-received_at", "-id"),
            },
        ),
        migrations.CreateModel(
            name="FeedbackPromptPageType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "ctype",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                        verbose_name="type",
                    ),
                ),
                (
                    "prompt",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="for_page_types",
                        to="feedback.feedbackprompt",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
